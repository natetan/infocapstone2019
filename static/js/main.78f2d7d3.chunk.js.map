{"version":3,"sources":["resources/images/blood-pact-logo.png","Header/Header.js","Team/Team.js","Views/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","logo","require","Header","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Jumbotron","className","fluid","Container","Row","Col","sm","src","props","title","subtitle","Component","team","Team","teamCards","map","member","Card","firstName","CardImg","top","width","image","alt","concat","lastName","CardBody","CardTitle","CardSubtitle","role","email","phone","CardText","bio","Button","CardLink","target","href","githubUrl","strings","LandingPage","Header_Header_Header","teamName","problemStatement","problemSolution","Team_Team","App","LandingPage_LandingPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78f2d7d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blood-pact-logo.b3aa9317.png\";","import React, { Component } from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\nimport './Header.css';\n\nconst logo = require('../resources/images/blood-pact-logo.png');\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div>\n        <Jumbotron className=\"bg-dark text-white\" fluid>\n          <Container fluid>\n            <Row>\n              <Col sm=\"2\">\n                <img src={logo} />\n              </Col>\n              <Col sm=\"10\">\n                <h1 className=\"display-3\">{this.props.title}</h1>\n                <p className=\"lead\">{this.props.subtitle}</p>\n              </Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, CardLink, Button, Col, Row } from 'reactstrap';\n\nconst team = require('./Team.json');\n\nexport class Team extends Component {\n  render() {\n    let teamCards = team.map((member) => {\n      return (\n        <Col sm=\"3\">\n          <Card key={member.firstName}>\n            <CardImg top width=\"100%\" src={member.image} alt={`${member.firstName} ${member.lastName}`} />\n            <CardBody>\n              <CardTitle>{member.firstName} {member.lastName}</CardTitle>\n              <CardSubtitle>Role: {member.role}</CardSubtitle>\n              <CardSubtitle>Email: {member.email}</CardSubtitle>\n              <CardSubtitle>Phone: {member.phone}</CardSubtitle>\n              <hr />\n              <CardText><em>{member.bio}</em></CardText>\n              <Button className=\"bg-success\">\n                <CardLink className=\"text-white\" target=\"_blanK\" href={member.githubUrl}>More Info</CardLink>\n              </Button>\n            </CardBody>\n          </Card>\n        </Col>\n      )\n    })\n    return (\n      <Row>\n        {teamCards}\n      </Row>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { Header } from '../Header/Header';\nimport { Team } from '../Team/Team';\n\nimport './LandingPage.css';\n\nconst strings = require('../resources/Strings.json');\n\nexport class LandingPage extends Component {\n  render() {\n    return (\n      <div>\n        <Header title={strings.teamName} subtitle={`${strings.problemStatement} ${strings.problemSolution}`} />\n        <div className=\"container\">\n          <h1>The Team</h1>\n          <Team />\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { LandingPage } from './Views/LandingPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <LandingPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}